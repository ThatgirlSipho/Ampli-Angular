import { Component, OnInit } from '@angular/core';
import { AccountService } from '../services/account.service';
import { AuditLog } from '../services/model';
import { AuditLogDetailDialogComponent } from './AuditLogDetailDialog/AuditLogDetailDialog.component';
import { MatDialog } from '@angular/material/dialog';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { DataService } from '../services/data.service';
import { Location } from '@angular/common';
import { AssistModalComponent } from '../assist-modal/assist-modal.component';
import { AssistService } from '../services/assist.service';

@Component({
  selector: 'app-AuditTrail',
  templateUrl: './AuditTrail.component.html',
  styleUrls: ['./AuditTrail.component.css']
})

export class AuditTrailComponent implements OnInit {

  auditLogs: AuditLog[] = [];
  searchParams = {
    userInput: '',
    tableName: '',
    action: '',
    fromDate: null,
    toDate: null
  };
  pageNumber = 1;
  pageSize = 10;
  totalRecords= 0;
  reportGeneratorName: string = '';
  reportGeneratorRole: string = '';


  constructor(private auditLogService: AccountService,
    private dialog: MatDialog, private dataService:DataService,
    private location: Location, private assistService: AssistService,
    ) { }
  /* displayedColumns: string[] = [ 'userId', 'tableName', 'action', 'dateTime', 'oldValues', 'newValues']; */
 // displayedColumns: string[] = ['auditLogId', 'userId', 'tableName', 'action', 'dateTime', 'oldValues', 'newValues'];
 displayedColumns: string[] = [ 'userId', 'tableName', 'action', 'dateTime','oldValues','newValues', 'expand'];
  expandedElement: any | null = null;
  toggleRow(row: any): void {
    this.expandedElement = this.expandedElement === row ? null : row;
  }

  
  ngOnInit(): void {
    this.getAuditLogs();
  }
  getAuditLogs(): void {
    this.auditLogService.getPagedAuditLogs(this.pageNumber, this.pageSize)
      .subscribe(response => {
        const auditLogData = response.data.$values; // Extract the array of logs from the $values property
        this.auditLogs = auditLogData;
        this.totalRecords = response.totalRecords; // Set the total records count
      }, error => {
        console.error('Error fetching audit logs:', error);
      });
  }
 

  searchAuditLogs(): void {
    const fromDate = this.searchParams.fromDate || undefined;
    const toDate = this.searchParams.toDate || undefined;
  
    this.auditLogService.advancedSearchAuditLogs(
      this.searchParams.userInput,
      this.searchParams.tableName,
      this.searchParams.action,
      fromDate,
      toDate,
      this.pageNumber,  // pass pageNumber
      this.pageSize     // pass pageSize
    ).subscribe(response => {
      this.auditLogs = response.data.$values; // Adjust to handle paged response
      this.totalRecords = response.totalRecords; // Set total records for paginator
    }, error => {
      console.error('Error fetching audit logs:', error);
    });
  }
  




  openDetailDialog(log: AuditLog): void {
    this.dialog.open(AuditLogDetailDialogComponent, {
      data: log,
      width: '600px'
    });
  }

  onPageChange(event: any): void {
    this.pageNumber = event.pageIndex + 1;
    this.pageSize = event.pageSize;
   // this.getAuditLogs();
   this.searchAuditLogs();
  }




  private getReportGenerator(): void {
    this.dataService.getCurrentUser().subscribe(
      (employee: any) => {
        this.reportGeneratorName = employee.fullName;
        this.reportGeneratorRole = employee.role;
      },
      (error) => {
        console.error('Error fetching employee data', error);
      }
    );
  }




  generatePDF(): void {
    alert('Generating PDF');

    // Create a new jsPDF instance
    const doc = new jsPDF();

       // Add background image
  const backgroundImage = new Image();
  backgroundImage.src = '/assets/Portrait Dashboard.png'; 
  doc.addImage(backgroundImage, 'PNG', 0, 0, 210, 297); 
  

    // Add title
    doc.setFontSize(18);
    doc.text('Audit Trail', 14, 20);

    // Add report generation date
    doc.setFontSize(12);
    doc.text(`Audit Generation Date: ${new Date().toLocaleDateString()}`, 14, 30);

    // Combine the generator's name and role
    const generatorText = `Generated by: ${this.reportGeneratorName}, ${this.reportGeneratorRole}`;

    // Add generator's details
    doc.text(generatorText, 14, 40);

    // Add client list in table format
    (doc as any).autoTable({
      startY: 50,
      head: [['User Id','Table Name', 'Action','Date Time'
        // ,'Old Values','New Values'
      ]],
      body: this.auditLogs.map((audit, index) => [
     
       audit.userId,
       audit.tableName,
       audit.action,
       audit.dateTime,
      /*  audit.oldValues,
       audit.newValues */
      ]),
    });

     // Generate the PDF as a Blob
     const pdfBlob = doc.output('blob');

     // Create a URL for the Blob
     const pdfUrl = URL.createObjectURL(pdfBlob);

     // Open the PDF in a new tab/window
     window.open(pdfUrl);
  }

  logout(): void {
    // Clear the localStorage
    localStorage.removeItem('userName');
    localStorage.removeItem('token');
    localStorage.removeItem('role');
    
    // Optionally redirect to the login page or homepage
    window.location.href = '/login'; // Adjust the URL as needed
  }

  openAssist(page: string): void {
    // Use the correct service method based on the page parameter.
    switch (page.toLowerCase()) {
      case 'legal-entity':
        this.assistService.getLegalContentByPage(page).subscribe(content => {
          this.dialog.open(AssistModalComponent, {
            data: content
          });
        });
        break;
  
      case 'forgot-password':
        this.assistService.getForgotContentByPage(page).subscribe(content => {
          this.dialog.open(AssistModalComponent, {
            data: content
          });
        });
        break;
  
      case 'start':
        this.assistService.getStartContentByPage(page).subscribe(content => {
          this.dialog.open(AssistModalComponent, {
            data: content
          });
        });
        break;
  
      case 'application':
        this.assistService.getApplicationContentByPage(page).subscribe(content => {
          this.dialog.open(AssistModalComponent, {
            data: content
          });
        });
        break;

        case 'list':
        this.assistService.getListContentByPage(page).subscribe(content => {
          this.dialog.open(AssistModalComponent, {
            data: content
          });
        });
        break;

        case 'createapplicant':
          this.assistService.getCreateApplicantContentByPage(page).subscribe(content => {
            this.dialog.open(AssistModalComponent, {
              data: content
            });
          });
          break;

          case 'consultantapplications':
            this.assistService.getConsultantApplicationsContentByPage(page).subscribe(content => {
              this.dialog.open(AssistModalComponent, {
                data: content
              });
            });
            break;

            case 'adminapplications':
            this.assistService.getAdminApplicationsContentByPage(page).subscribe(content => {
              this.dialog.open(AssistModalComponent, {
                data: content
              });
            });
            break;

            case 'getconsultants':
            this.assistService.getGetConsultantsContentByPage(page).subscribe(content => {
              this.dialog.open(AssistModalComponent, {
                data: content
              });
            });
            break;

            case 'audit':
            this.assistService.getAuditContentByPage(page).subscribe(content => {
              this.dialog.open(AssistModalComponent, {
                data: content
              });
            });
            break;
  
      default:
        console.error('Unknown page:', page);
        break;
    }
  }

  goBack(): void {
    this.location.back();
  }

  // Method to toggle the help message visibility

}
