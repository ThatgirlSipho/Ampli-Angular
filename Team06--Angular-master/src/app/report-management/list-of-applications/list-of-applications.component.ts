import { Component } from '@angular/core';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { DataService } from 'src/app/services/data.service';

interface Application {
  applicationId: number;
  legalEntityTypeId: number;
  applicationStatusDescription?: string; // Make it optional if not always present
  legalEntityTypeDescription?: string;  // Make it optional if not always present
  applicationStartDateTime?: string; 
}

interface LegalEntityType {
  legalEntityTypeId: number;
  description: string;
}


@Component({
  selector: 'app-list-of-applications',
  templateUrl: './list-of-applications.component.html',
  styleUrls: ['./list-of-applications.component.css']
})
export class ListOfApplicationsComponent {

  applications: Application[] = [];
  legalEntityTypes: LegalEntityType[] = [];
  reportData: { legalEntityType: string, applicationCount: number }[] = [];
  grandTotal: number = 0;
  reportGeneratorName: string = '';
  reportGeneratorRole: string = '';

  displayedColumns: string[] = ['legalEntityType', 'applicationCount'];

  constructor(private dataService: DataService) { }

  ngOnInit(): void {
    this.fetchData();
  }

  fetchData(): void {
    this.dataService.GetApplicationsDto().subscribe(
      (applications) => {
        console.log('Applications data received:', applications); // Debug log
        this.applications = applications;
  
        this.dataService.GetAllLegalEntityTypes().subscribe(
          (legalEntityTypes) => {
            console.log('Legal Entity Types data received:', legalEntityTypes); // Debug log
            this.legalEntityTypes = legalEntityTypes;
            this.generateReportData();
            this.getReportGenerator();
          },
          (error) => {
            console.error('API Error (LegalEntityTypes):', error);
          }
        );
      },
      (error) => {
        console.error('API Error (Applications):', error);
      }
    );
  }
  

  generateReportData(): void {
    const applicationCounts = this.applications.reduce((acc, app) => {
      const typeDescription = app.legalEntityTypeDescription || 'Unknown'; // Default value if not present
      if (!acc[typeDescription]) {
        acc[typeDescription] = 0;
      }
      acc[typeDescription]++;
      return acc;
    }, {} as { [key: string]: number });
  
    this.reportData = this.legalEntityTypes.map(type => ({
      legalEntityType: type.description,
      applicationCount: applicationCounts[type.description] || 0
    }));
  
    this.grandTotal = Object.values(applicationCounts).reduce((total, count) => total + count, 0);
  
    console.log('Applications:', this.applications);
    console.log('Application Counts:', applicationCounts);
    console.log('Report Data:', this.reportData);
    console.log('Grand Total:', this.grandTotal);
  }
  
  


  getReportGenerator(): void {
    this.dataService.getCurrentUser().subscribe(user => {
      this.reportGeneratorName = user.fullName;
      this.reportGeneratorRole = user.role;
    }, error => {
      console.error('Error fetching user data', error);
    });
  }

  generatePDF(): void {
    const doc = new jsPDF();

      // Add background image
  const backgroundImage = new Image();
  backgroundImage.src = '/assets/Portrait Dashboard.png'; 
  doc.addImage(backgroundImage, 'PNG', 0, 0, 210, 297); 
  
  
    doc.setFontSize(18);
    doc.text('Application Report', 14, 20);
    doc.setFontSize(12);
    doc.text(`Report Generation Date: ${new Date().toLocaleDateString()}`, 14, 30);
    const generatorText = `Generated by: ${this.reportGeneratorName}, ${this.reportGeneratorRole}`;
    doc.text(generatorText, 14, 40);

    const tableHeaders = ['Legal Entity Type', 'Number of Applications'];
    const tableRows = this.reportData.map(row => [row.legalEntityType, row.applicationCount.toString()]);

    (doc as any).autoTable({
      startY: 50,
      head: [tableHeaders],
      body: tableRows,
      theme: 'striped',
      headStyles: { fillColor: [0, 0, 139] },
      columnStyles: { 0: { cellWidth: 100 }, 1: { cellWidth: 50 } }
    });

    // Add grand total
    const finalY = (doc as any).autoTable.previous.finalY;
    doc.setFontSize(12);
    doc.text(`Grand Total: ${this.grandTotal}`, 14, finalY + 10);

    // Generate the PDF as a Blob
    const pdfBlob = doc.output('blob');

    // Create a URL for the Blob
    const pdfUrl = URL.createObjectURL(pdfBlob);

    // Open the PDF in a new tab/window
    window.open(pdfUrl);
  }
}
