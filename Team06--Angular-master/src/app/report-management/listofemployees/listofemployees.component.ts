import { Component, OnInit } from '@angular/core';
import { EmployeeService } from 'src/app/services/employee.service';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { DataService } from 'src/app/services/data.service';

interface Employee {
  name: string;
  role: string;
  fullName: string;
}

@Component({
  selector: 'app-listofemployees',
  templateUrl: './listofemployees.component.html',
  styleUrls: ['./listofemployees.component.css']
})
export class ListofemployeesComponent implements OnInit {
  employees: Employee[] = [];
  groupedEmployees: { [key: string]: string[] } = {};
  subtotals: { [key: string]: number } = {};
  grandTotal: number = 0;
  reportGeneratorName: string = '';
  reportGeneratorRole: string = '';

  constructor(private employeeService: EmployeeService,
    private dataService: DataService
  ) { }

  ngOnInit(): void {
    this.employeeService.getAllEmployees().subscribe(data => {
      this.employees = data.map(emp => ({
        name: emp.fullName,
        role: emp.role,
        fullName: emp.fullName
      }));
      
      console.log('Mapped Employees:', this.employees);
      this.groupEmployees();
      this.calculateSubtotals();
      this.calculateGrandTotal();
      this.getReportGenerator(); // Fetch the report generator's details
    }, error => {
      console.error('API Error:', error);
    });
  }

  groupEmployees(): void {
    console.log('Grouping Employees:', this.employees);
    this.groupedEmployees = this.employees.reduce((groups, employee) => {
      const role = employee.role || 'Unknown';
      if (!groups[role]) {
        groups[role] = [];
      }
      groups[role].push(employee.name);
      return groups;
    }, {} as { [key: string]: string[] });
    
    console.log('Grouped Employees:', this.groupedEmployees);
  }

  calculateSubtotals(): void {
    this.subtotals = {};
    for (const role in this.groupedEmployees) {
      this.subtotals[role] = this.groupedEmployees[role].length;
    }
    console.log('Subtotals:', this.subtotals);
  }

  calculateGrandTotal(): void {
    this.grandTotal = Object.values(this.subtotals).reduce((total, count) => total + count, 0);
    console.log('Grand Total:', this.grandTotal);
  }

  getReportGenerator(): void {
    // Replace with your actual method to fetch report generator details
    this.dataService.getCurrentUser().subscribe(
      (employee: Employee) => {
        console.log('Employee Data:', employee);
        this.reportGeneratorName = employee.fullName;
        this.reportGeneratorRole = employee.role;
      },
      (error) => {
        console.error('Error fetching employee data', error);
      }
    );
  }

  generatePDF(): void {
    const doc = new jsPDF();
    
      // Add background image
  const backgroundImage = new Image();
  backgroundImage.src = '/assets/Portrait Dashboard.png'; 
  doc.addImage(backgroundImage, 'PNG', 0, 0, 210, 297); 
  
    // Add title
    doc.setFontSize(18);
    doc.text('Employee Report', 14, 20);

    // Add report generation date
    doc.setFontSize(12);
    doc.text(`Report Generation Date: ${new Date().toLocaleDateString()}`, 14, 30);

    // Combine the generator's name and role
    const generatorText = `Generated by: ${this.reportGeneratorName}, ${this.reportGeneratorRole}`;

    // Add generator's details
    doc.text(generatorText, 14, 40);
    
    // Prepare table data
    let startY = 50; // Starting Y position for the table
    const tableHeaders = ['Role', 'Employee Names', 'Subtotal'];

    // Create an array of table rows
    const tableRows = [];
    for (const role in this.groupedEmployees) {
      tableRows.push([role, this.groupedEmployees[role].join(', '), this.subtotals[role].toString()]);
    }

    // Add grouped employees table
    (doc as any).autoTable({
      startY: startY,
      head: [tableHeaders],
      body: tableRows,
      theme: 'striped',
      headStyles: { fillColor: [0, 0, 139] }, // Customize header row styles
      columnStyles: {
        0: { cellWidth: 40 }, // Adjust column widths if needed
        1: { cellWidth: 100 },
        2: { cellWidth: 30 }
      }
    });

    // Add grand total
    startY += (doc as any).autoTable.previous.finalY + 10;
    doc.setFontSize(12);
    doc.text(`Grand Total: ${this.grandTotal}`, 14, startY);

    // Generate the PDF as a Blob
    const pdfBlob = doc.output('blob');

    // Create a URL for the Blob
    const pdfUrl = URL.createObjectURL(pdfBlob);

    // Open the PDF in a new tab/window
    window.open(pdfUrl);

    // Optionally, trigger a download
    // const link = document.createElement('a');
    // link.href = pdfUrl;
    // link.download = 'employee-report.pdf';
    // document.body.appendChild(link);
    // link.click();
    // document.body.removeChild(link);
  }
}
