import { Component } from '@angular/core';
import { DataService } from 'src/app/services/data.service';
import { Product } from 'src/app/services/model';
import { Employee } from 'src/app/services/model';
import {jsPDF} from 'jspdf';
import 'jspdf-autotable';


@Component({
  selector: 'app-list-of-products',
  templateUrl: './list-of-products.component.html',
  styleUrls: ['./list-of-products.component.css']
})
export class ListOfProductsComponent {
  products: Product[] = [];
  totalProducts: number = 0;
  reportGenerationDate: Date = new Date();
  reportGeneratorName: string = '';
  reportGeneratorRole: string = '';
  
  constructor(private dataService: DataService) {}
  
  ngOnInit(): void {
    // Fetch the products
    this.dataService.GetAllProducts().subscribe(
      (data: Product[]) => {
        this.products = data;
        this.totalProducts = this.products.length; // Calculate the total number of products
        this.reportGenerationDate = new Date(); // Set the report generation date
        this.getReportGenerator(); // Fetch the report generator's details
      },
      (error) => {
        console.error('Error fetching products', error);
      }
    );
  }
  
  getReportGenerator(): void {
    this.dataService.getCurrentUser().subscribe(
      (employee: Employee) => {
        console.log('Employee Data:', employee); // Log the entire employee object
     
        this.reportGeneratorName = employee.fullName;
        this.reportGeneratorRole = employee.role;
      },
      (error) => {
        console.error('Error fetching employee data', error);
        // Optionally, show user-friendly message or handle the error accordingly
      }
    );
  }
  
  
  generatePDF(): void {
    const doc = new jsPDF();

    // Add background image
  const backgroundImage = new Image();
  backgroundImage.src = '/assets/Portrait Dashboard.png'; 
  doc.addImage(backgroundImage, 'PNG', 0, 0, 210, 297); 
  
    // Add title
    doc.setFontSize(18);
    doc.text('List of Available Products Report', 14, 20);

     // Add report generation date
     doc.setFontSize(12);
     doc.text(`Report Generation Date: ${this.reportGenerationDate.toLocaleDateString()}`, 14, 30);
   
    // Combine the generator's name and role
    const generatorText = `Generated by: ${this.reportGeneratorName}, ${this.reportGeneratorRole}`;

    // Add generator's details
    doc.text(generatorText, 14, 40);

    // Add a table with products
    (doc as any).autoTable({
      startY: 60, // Start Y position for the table
      head: [['#','Product Name','Description']], // Column headers
      body: this.products.map(product => [
        product.productId,
        product.description,
        this.getProductDescription(product.description)
      ]), // Table rows
      theme: 'striped', // Optional: 'striped' for striped rows
      headStyles: { fillColor: [255, 0, 0] }, // Optional: Customize header row styles
      margin: { top: 60 },
    });

    // Generate the PDF as a Blob
  const pdfBlob = doc.output('blob');

  // Create a URL for the Blob
  const pdfUrl = URL.createObjectURL(pdfBlob);

  // Open the PDF in a new tab/window
  window.open(pdfUrl);

  // // Optionally, trigger a download
  // const link = document.createElement('a');
  // link.href = pdfUrl;
  // link.download = 'generated.pdf';
  // document.body.appendChild(link);
  // link.click();
  // document.body.removeChild(link);
  // }
  
  }

  getProductDescription(description: string): string {
    switch (description) {
      case 'DebiCheck':
        return 'DebiCheck is an authenticated debit order system that requires consumers to confirm new debit orders with their bank before they are processed, ensuring greater control and reducing unauthorized debits.';
      case 'Debit & Credit Card Payments':
        return 'This service enables businesses to accept payments from customers using debit and credit cards, providing a secure and efficient means for processing transactions both online and in-person.';
      case 'Social Grant EFT Debits':
        return 'Social Grant EFT Debits allow for the electronic debiting of social grant payments directly from beneficiaries\' bank accounts, facilitating secure and timely access to government-provided financial assistance.';
      case 'EFT Debits':
        return 'Electronic Funds Transfer (EFT) Debits is a payment method that allows businesses to collect payments directly from customersâ€™ bank accounts, offering a reliable and convenient way to process recurring or one-time payments.';
      case 'AVS/AVS-R':
        return 'Account Verification Services (AVS) and Account Verification Services with Response (AVS-R) are tools that verify the ownership and validity of a bank account before processing transactions, enhancing security and reducing fraud.';
      case 'eSignatures':
        return 'eSignatures is a digital solution that enables the signing of documents electronically, offering a legally recognized and secure way to execute agreements and contracts without the need for physical paperwork.';
      case 'ALLPS Prepaid -Products':
        return 'ALLPS Prepaid Products is a suite of prepaid services that allows consumers to purchase and manage prepaid items such as airtime, electricity, and other utilities, through a convenient digital platform.';
      case 'ALLPS Managements Platform':
        return 'The ALLPS Management Platform is a comprehensive solution for managing prepaid services and transactions, providing businesses with the tools to track, analyze, and optimize their prepaid offerings.';
      case 'Device Selection':
        return 'Device Selection is a service that assists businesses and consumers in choosing the appropriate hardware and devices for their specific needs, ensuring compatibility and maximizing operational efficiency.';
      default:
        return 'A specialized product designed to meet specific business needs. For more information, please consult the product documentation.';
    }
}

}
